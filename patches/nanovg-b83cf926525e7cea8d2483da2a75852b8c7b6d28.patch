diff -uprN ./nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28/src/nanovg.c nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28-unofficial/src/nanovg.c
--- ./nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28/src/nanovg.c	2016-05-10 16:41:52 +0900
+++ nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28-unofficial/src/nanovg.c	2016-05-10 16:49:46 +0900
@@ -673,6 +673,48 @@ void nvgScale(NVGcontext* ctx, float x,
 	nvgTransformPremultiply(state->xform, t);
 }
 
+#if defined(UNOFFICIAL_HACK_ENABLE_TRANSFORM_WORLD)
+void nvgTranslateWorld(NVGcontext* ctx, float x, float y)
+{
+	NVGstate* state = nvg__getState(ctx);
+	float t[6];
+	nvgTransformTranslate(t, x,y);
+	nvgTransformMultiply(state->xform, t);
+}
+
+void nvgRotateWorld(NVGcontext* ctx, float angle)
+{
+	NVGstate* state = nvg__getState(ctx);
+	float t[6];
+	nvgTransformRotate(t, angle);
+	nvgTransformMultiply(state->xform, t);
+}
+
+void nvgSkewXWorld(NVGcontext* ctx, float angle)
+{
+	NVGstate* state = nvg__getState(ctx);
+	float t[6];
+	nvgTransformSkewX(t, angle);
+	nvgTransformMultiply(state->xform, t);
+}
+
+void nvgSkewYWorld(NVGcontext* ctx, float angle)
+{
+	NVGstate* state = nvg__getState(ctx);
+	float t[6];
+	nvgTransformSkewY(t, angle);
+	nvgTransformMultiply(state->xform, t);
+}
+
+void nvgScaleWorld(NVGcontext* ctx, float x, float y)
+{
+	NVGstate* state = nvg__getState(ctx);
+	float t[6];
+	nvgTransformScale(t, x, y);
+	nvgTransformMultiply(state->xform, t);
+}
+#endif
+
 void nvgCurrentTransform(NVGcontext* ctx, float* xform)
 {
 	NVGstate* state = nvg__getState(ctx);
@@ -871,6 +913,31 @@ NVGpaint nvgImagePattern(NVGcontext* ctx
 	return p;
 }
 
+#if defined(UNOFFICIAL_HACK_FILL_COLOR_AFFECTS_THE_IMAGE_PATTERN)
+NVGpaint nvgImagePatternWithFillColor(NVGcontext* ctx,
+								float cx, float cy, float w, float h, float angle,
+								int image)
+{
+	NVGpaint p;
+	NVGstate* state = nvg__getState(ctx);
+	memset(&p, 0, sizeof(p));
+
+	nvgTransformRotate(p.xform, angle);
+	p.xform[4] = cx;
+	p.xform[5] = cy;
+
+	p.extent[0] = w;
+	p.extent[1] = h;
+
+	p.image = image;
+
+	p.innerColor = state->fill.innerColor;
+	p.outerColor = state->fill.outerColor;
+
+	return p;
+}
+#endif
+
 // Scissoring
 void nvgScissor(NVGcontext* ctx, float x, float y, float w, float h)
 {
diff -uprN ./nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28/src/nanovg.h nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28-unofficial/src/nanovg.h
--- ./nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28/src/nanovg.h	2016-05-10 16:41:52 +0900
+++ nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28-unofficial/src/nanovg.h	2016-05-10 16:50:52 +0900
@@ -105,6 +105,9 @@ enum NVGimageFlags {
 	NVG_IMAGE_REPEATY			= 1<<2,		// Repeat image in Y direction.
 	NVG_IMAGE_FLIPY				= 1<<3,		// Flips (inverses) image in Y direction when rendered.
 	NVG_IMAGE_PREMULTIPLIED		= 1<<4,		// Image data has premultiplied alpha.
+#if defined(UNOFFICIAL_HACK_ENABLE_NEAREST_RESIZE)
+	NVG_UOH_IMAGE_RESIZE_NEAREST	= 1<<5,		// use NEAREST to Min/Mag Filter (Unofficial Hack)
+#endif
 };
 
 // Begin drawing a new frame
@@ -258,6 +261,14 @@ void nvgSkewY(NVGcontext* ctx, float ang
 // Scales the current coordinate system.
 void nvgScale(NVGcontext* ctx, float x, float y);
 
+#if defined(UNOFFICIAL_HACK_ENABLE_TRANSFORM_WORLD)
+void nvgTranslateWorld(NVGcontext* ctx, float x, float y);
+void nvgRotateWorld(NVGcontext* ctx, float angle);
+void nvgSkewXWorld(NVGcontext* ctx, float angle);
+void nvgSkewYWorld(NVGcontext* ctx, float angle);
+void nvgScaleWorld(NVGcontext* ctx, float x, float y);
+#endif
+
 // Stores the top part (a-f) of the current transformation matrix in to the specified buffer.
 //   [a c e]
 //   [b d f]
@@ -364,6 +375,12 @@ NVGpaint nvgRadialGradient(NVGcontext* c
 NVGpaint nvgImagePattern(NVGcontext* ctx, float ox, float oy, float ex, float ey,
 						 float angle, int image, float alpha);
 
+#if defined(UNOFFICIAL_HACK_FILL_COLOR_AFFECTS_THE_IMAGE_PATTERN)
+NVGpaint nvgImagePatternWithFillColor(NVGcontext* ctx,
+								float cx, float cy, float w, float h, float angle,
+								int image);	
+#endif
+
 //
 // Scissoring
 //
diff -uprN ./nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28/src/nanovg_gl.h nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28-unofficial/src/nanovg_gl.h
--- ./nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28/src/nanovg_gl.h	2016-05-10 16:41:52 +0900
+++ nanovg-b83cf926525e7cea8d2483da2a75852b8c7b6d28-unofficial/src/nanovg_gl.h	2016-05-10 16:52:54 +0900
@@ -740,10 +740,22 @@ static int glnvg__renderCreateTexture(vo
 
 	if (imageFlags & NVG_IMAGE_GENERATE_MIPMAPS) {
 		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
+#if defined(UNOFFICIAL_HACK_ENABLE_NEAREST_RESIZE)
+	} else if (imageFlags & NVG_UOH_IMAGE_RESIZE_NEAREST) {
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
+#endif
 	} else {
 		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
 	}
+#if defined(UNOFFICIAL_HACK_ENABLE_NEAREST_RESIZE)
+	if (imageFlags & NVG_UOH_IMAGE_RESIZE_NEAREST) {
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
+	} else {
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+	}
+#else
 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+#endif
 
 	if (imageFlags & NVG_IMAGE_REPEATX)
 		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
